rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() { return request.auth != null; }
    function isOwner(uid) { return isSignedIn() && request.auth.uid == uid; }

    match /articles/{id} {
      allow read: if true;
      // writes by admin only; lock down for now
      allow write: if false;
    }

    match /submissions/{id} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.submittedByUid == request.auth.uid;
      allow update, delete: if false; // admin function promotes to articles
    }

    match /users/{uid} {
      allow read: if true;
      allow create, update: if isOwner(uid);
      allow delete: if isOwner(uid);
    }

    match /articleLikes/{likeId} {
      allow read: if true;
      allow create: if isSignedIn()
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.likeCount == null // prevent client-side count writes
        && get(/databases/$(database)/documents/articles/$(request.resource.data.articleId)).data.featured == false;
      allow delete: if isSignedIn() && resource.data.uid == request.auth.uid; // optional unlike
      allow update: if false;
    }

    match /dailyTop/{metroId}/{date} {
      allow read: if true;
      allow write: if false;
    }

    match /reports/{id} {
      allow read: if false;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}
